@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading.Tasks
@using System.Net.Http;
@using System.Net.Http.Headers;
@page "/"
@layout WidgetLayout
@inject HttpClient Http

<div class="home">
@foreach (var chore in Chores)
{
    <img src="@chore.HeatMapIcon()" class="@chore.ZoneId">
}
</div>


@code {
    private string _hubConnectionUrl = "https://acs-notify.azurewebsites.net/api";
    private string _functionUrl = "https://chores-iot.azurewebsites.net/api/getChores";

    public List<Chore> Chores { get; set; } = new List<Chore> ();

    private void RemoveExistingChoreFromList (string choreId) {
        if (Chores.Any (x => x.ChoreId == choreId)) {
            Chores.RemoveAll (x => x.ChoreId == choreId);
        }
    }
    private async Task Preload () {
        var result = await Http.GetFromJsonAsync<ChoreListData> (_functionUrl);
        Chores = result.Chores;
        StateHasChanged ();
    }
    private void Reload(Chore chore) {
        RemoveExistingChoreFromList (choreId: chore.ChoreId);
        Chores.Add (chore);
        Chores = Chores.OrderBy (x => x.AssignedTo).ThenBy (x => x.Message).ToList ();
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync () {
        await Preload ();

        var connection = new HubConnectionBuilder ()
            .WithUrl (_hubConnectionUrl)
            .WithAutomaticReconnect ()
            .Build ();

        connection.On<Chore> ("choreStatusUpdated", (chore) => {
            Reload(chore);
        });

        connection.On<Chore> ("textingChoreAssignee", (chore) => {
            chore.SmsStatus = $"Texting {chore.AssignedTo} a reminder";
            Reload(chore);
        });

        connection.On<Chore> ("choreAssigneeTexted", (chore) => {
            chore.SmsStatus = $"Reminder sent at {DateTime.Now.ToShortTimeString()}";
            Reload(chore);
        });

        connection.On<string> ("smsMessageReceived", (messageId) => {
            var chore = Chores.First (x => x.MessageId == messageId);
            chore.SmsStatus = $"Reminder received at {DateTime.Now.ToShortTimeString()}";
            Reload(chore);
        });

        await connection.StartAsync ();
    }
}
